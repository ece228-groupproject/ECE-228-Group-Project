import torch
from torch.utils.tensorboard import SummaryWriter
from datetime import datetime

REPORT_FREQUENCY = 1000

def TrainModel(model, EPOCHS, loss_fn, train_loader, val_loader, optimizer, lr_scheduler, scaler):
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/{}_{}'.format(model.name,timestamp))#used for tracking our model during training
    epoch_number = 0

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))

        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer, model,train_loader,optimizer,lr_scheduler,scaler,loss_fn)

        running_vloss = 0.0

        #now we eavluate on our validation set to perform early stopping
        model.eval()
        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(val_loader):
                vinputs, vtargets = vdata
                vinputs.to(model.device)
                vtargets.to(model.device)
                #again were using AMP to allow us to train faster
                with torch.amp.autocast(torch.device(model.device).type):
                    voutputs = model(vinputs)
                    vloss = loss_fn(vtargets,voutputs)
                    running_vloss += vloss

        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))

        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()

        # Track best performance, and save the model's state
        #AKA early stopping, a form of regularization we talked about it class
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            torch.save(model.state_dict(), model.path)

        epoch_number += 1


def train_one_epoch(epoch_index, tb_writer, model, training_loader,optimizer,lr_scheduler,loss_fn, scaler= None):
    running_loss = 0.
    last_loss = 0.

    # Here, we use enumerate(training_loader) instead of
    # iter(training_loader) so that we can track the batch
    # index and do some intra-epoch reporting
    for i, data in enumerate(training_loader):
        # Every data instance is an input + label pair
        inputs, targets = data
        #send them to the model's device
        inputs.to(model.device)
        targets.to(model.device)

        # Zero your gradients for every batch!
        optimizer.zero_grad()

        #use automatic mixed precision to reduce memory consumption and allow us to run on more limited resources
        with torch.amp.autocast(torch.device(model.device).type):
            # Make predictions for this batch
            outputs = model(inputs)
            # Compute the loss and its gradients
            loss = loss_fn(targets, outputs)
            
        if scaler:#if were scaling our loss
            scaler.scale(loss).backward()
            scaler.step(optimizer)
            old_scaler = scaler.get_scale()
            scaler.update()
            new_scaler = scaler.get_scale()
            if new_scaler >= old_scaler:
                lr_scheduler.step()
        else:
            loss.backward()
            optimizer.step()
            lr_scheduler.step()

        # Gather data and report
        running_loss += loss
        if i % REPORT_FREQUENCY == REPORT_FREQUENCY-1:
            last_loss = running_loss / i # loss per batch
            print('  batch {} loss: {}'.format(i + 1, last_loss))
            tb_x = epoch_index * len(training_loader) + i + 1
            tb_writer.add_scalar('Loss/train', last_loss, tb_x)
            

    return last_loss